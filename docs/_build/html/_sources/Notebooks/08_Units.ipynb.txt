{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5b6f419a-7574-447f-91dd-c3c0bdf5944c",
   "metadata": {},
   "source": [
    "# Units\n",
    "\n",
    "MobsPy supports units. \n",
    "One can assign units to rates using the reserved u object from the Pint Unit Registry reserved for units. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a32b733b-255e-4bde-88dd-051fab555a97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ball Child Bacteria\n"
     ]
    }
   ],
   "source": [
    "from mobspy import *\n",
    "\n",
    "Ball, Child, Bacteria = BaseSpecies(3)\n",
    "\n",
    "Ball(10/u.meter**2)\n",
    "Child(1/u.meter**2)\n",
    "Bacteria(1*u.mol)\n",
    "print(Ball, Child, Bacteria)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e0177c7-d600-49dc-8a43-963631161537",
   "metadata": {},
   "source": [
    "For value assigments, species can receive either concentrations or direct counts. \n",
    "For concentrations, MobsPy will convert them into counts for the simulation by multiplying them by the volume of the simulation.\n",
    "Also, one can assign area-based (counts/u.meter^2) or linear-based (counts/u.meter) (or even four dimensional if you feel like simulating truly alien species)\n",
    "concentrations to the counts. \n",
    "However, it's expected that the simulation maintains dimensional consistensy. If one assings an area-base concentration to one and a volume-based concentration to other the model will not compile.\n",
    "The same also holds if one assigns a volume to a area-based model. For instance, the line bellow yields an error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c78aad99-67e0-40d7-9c7b-a17b9c29978a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Compiling model\n",
      "\u001b[91mERROR: The dimensions are not consistent. There are at least two units given for different dimension models\u001b[0m\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "1",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 1\n"
     ]
    }
   ],
   "source": [
    "S_error = Simulation(Ball | Child)\n",
    "S_error.volume = 3*u.m**3\n",
    "S_error.compile()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9c7197b-6214-43d6-acdb-bc3b846c03c5",
   "metadata": {},
   "source": [
    "As explained one can also assign counts to rates. The units for rates are [count]^o/([Time]x[Space]^o) where o is the reaction order (the reaction order is equal to the number of reactants). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "518b829d-2094-43b6-88ae-3fc5d7048181",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<mobspy.modules.meta_class.Reactions at 0x7fad57685220>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Bacteria >> Zero [1*u.mol/u.second]\n",
    "\n",
    "Ball + Child + Child >> Ball + Child [1e-3*u.meter**4/u.hour]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "582f0017-bfff-4458-9900-1c7d4f517bc0",
   "metadata": {},
   "source": [
    "For the compilation. MobsPy converts all provided units into decimeter (which yields liters for volume), seconds and counts. In the compilation, we can see the provided values in MobsPy standard units:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1184ead7-cbda-46fb-a7f0-c61de07aae3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Species\n",
      "Ball,20.0\n",
      "Child,2.0\n",
      "\n",
      "Mappings\n",
      "Ball :\n",
      "Ball\n",
      "Child :\n",
      "Child\n",
      "\n",
      "Parameters\n",
      "volume,199.99999999999997\n",
      "\n",
      "Reactions\n",
      "reaction_0,{'re': [(1, 'Ball'), (2, 'Child')], 'pr': [(1, 'Ball'), (1, 'Child')], 'kin': 'Ball * Child * Child * 0.0027777777777777775 * volume^-2'}\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Compiling model\n"
     ]
    }
   ],
   "source": [
    "S = Simulation(Ball | Child)\n",
    "S.volume = 2*u.meter**2\n",
    "print(S.compile())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98c2aecd-1046-4936-809c-4cfdb5064b63",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
